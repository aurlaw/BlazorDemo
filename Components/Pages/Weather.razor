@page "/weather"
@attribute [RenderModeInteractiveServer]

@attribute [StreamRendering(true)]

@inject IWeatherService WeatherService
@inject ILogger<Weather> Logger

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            @* <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
                <td>
                    <button class="btn btn-secondary">Edit</button>
                    <button class="btn btn-danger">Delete</button>
                </td>
            </tr> *@
            <WeatherCell WeatherForecast="forecast" />
        }
        </tbody>
    </table>
    <p>
        @messageText
    </p>

    
    <EditWeather IsNew="true" OnSave="@OnWeatherSave"  /> <!-- Use events to manage reload -->
    

}

@code {
    private WeatherForecast[]? forecasts;
    private string messageText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Init");
        await LoadWeather();
    }

    private async Task LoadWeather() 
    {
        var data = await WeatherService.GetWeather();
        forecasts = data.ToArray();


    }

    private async Task OnWeatherSave(string message) 
    {
        Logger.LogInformation("OnWeatherSave");
        messageText = message;
        await LoadWeather();        
    }


}