@page "/weather"
@page "/weather/{Page:int}"

@inherits PageBase

@rendermode InteractiveServer

@attribute [StreamRendering(true)]

@inject IWeatherService WeatherService
@inject ILogger<Weather> Logger



<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data. </p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <p>
        @messageText
    </p>
    @if(totalItems.HasValue) 
    {
        <p>Total Items: @totalItems.Value</p>

    }

    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {

            <WeatherCell WeatherForecast="forecast" OnChange="@OnWeatherCellChange" />
        }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5">
                    <Paginator Pager="pager" UrlFormat="/weather/{0}" />
                </td>
            </tr>
        </tfoot>
    </table>
    <p>
        @messageText
    </p>
    <EditWeather OnSave="@OnWeatherSave"  /> <!-- Use events to manage reload -->
}

@code {
    private IList<WeatherForecast>? forecasts;
    private int? totalItems;    
    private string messageText = string.Empty;
    private Pager? pager;

    [Parameter]
    public int? Page { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Init");
        Page ??= 1;
        await LoadWeather();
    }

    private async Task LoadWeather() 
    {
        PaginatedResult<WeatherForecast> result = await WeatherService.GetWeather(page:Page);
        forecasts = result.Results;
        pager = result.PageInfo;
        totalItems = result.PageInfo.TotalItems;


    }

    // Callbacks
    private async Task OnWeatherSave(string message) 
    {
        Logger.LogInformation("OnWeatherSave");
        messageText = message;
        await LoadWeather();        
    }

    private async Task OnWeatherCellChange(string message)
    {
        Logger.LogInformation("OnCellChange");
        messageText = message;
        await LoadWeather();        
    }



}