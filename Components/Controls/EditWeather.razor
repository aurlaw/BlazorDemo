@rendermode InteractiveServer
@inject IWeatherService WeatherService
@inject ILogger<EditWeather> Logger

    
<h3>@Title</h3>

<EditForm id="forecast-form" Model="Input" FormName="editWeather" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger"/>
    <div class="mb-3">
        <label for="summary" class="form-label">Summary</label>
        <InputText id="summary" @bind-Value="Input.Summary" class="form-control" placeholder="Summary"/>
    </div>
    <div class="mb-3">
        <label for="date" class="form-label">Date</label>
        <InputDate id="date" @bind-Value="Input.Date" ParsingErrorMessage="Must be a date" aria-required="true" placeholder="Date" />
        <ValidationMessage For="() => Input.Date" class="text-danger"/>
    </div>
    <div class="mb-3">
        <label for="tempC" class="form-label">Temperature in Celsius</label>
        <InputNumber @bind-Value="Input.TemperatureC" ParsingErrorMessage="Must be an integer value" aria-required="true" placeholder="Temperature in C" />
        <ValidationMessage For="() => Input.TemperatureC" class="text-danger"/>
    </div>
	<input type="submit" value="Submit" class="btn btn-primary"/>
    
</EditForm>


 <!-- Use events to manage reload -->
@code {

    
    [Parameter]
    public WeatherForecast? WeatherForecast { get; set; }


    [SupplyParameterFromForm]
    private Forecast? Input { get; set; } = default!;

    [Parameter]
    public EventCallback<string> OnSave { get; set; }


    private string Title => WeatherForecast is null ? "Add Forecast" : "Edit Forecast";
    private int? Id;

    protected override void OnInitialized()
    {
        if (WeatherForecast is not null)
        {
            Input = Forecast.FromEntity(WeatherForecast);
            Id = Input.Id;
        }
        Input ??= new();
    }
    private async Task OnValidSubmitAsync()
    {
        var result = await WeatherService.SaveWeather(Id, Input.Date, Input.TemperatureC, Input.Summary);
        var message =  result.Item1 ? $"Form submitted with temp: {Input.TemperatureC}" : "Error submitting weather";
        Logger.LogInformation("Saving");
        await OnSave.InvokeAsync(message);
        Logger.LogInformation("Saved");

    }    


}
